MASTER SOFTWARE
This application is well-suited for testing and interacting with sensors and actuators in a controlled environment, providing both manual control through the UI and automated processing of sensor commands and responses.

1. Modules and Libraries
Tkinter: This is a Python library for creating graphical user interfaces (GUIs). It is used to build the application's interface, such as buttons, entry fields, ComboBoxes, and labels.
Serial (pyserial): This module allows communication over the serial port, which is how the application sends and receives data to/from theSLve software.
Time: The time.sleep() function is used to pause execution for a given number of seconds (in this case, determined by the timeout field or defaulting to 15 seconds).
Pandas: This library is used to work with Excel data (i.e., telemetry and telecommand commands, IDs, and error selections).
pyinstaller:-Used to convert the python file into exe file

2. Sending and Receiving Data through Serial Port
Sending Data
Data Flow:

The user inputs various parameters into the Tkinter UI, such as sensor selection, torque values, telecommand, or telemetry settings.
Data from the UI is stored in the send buffer (a temporary storage to hold the data before sending).
The user can choose to edit the data (e.g., via an 'Edit Command' button) before sending it.
Once the 'Send' button is clicked, the data from the send buffer is transmitted via the serial port to the Arduino.
Send Buffer Construction:

The send buffer typically stores data such as:
Telecommand or telemetry IDs.
Torque settings (if selected).
Error selection (for telecommands).
Prefix (0x1F, 0x7F) and suffix (0x1F, 0xFF) bytes that must be appended and removed from the final response.
Each of these components is stored as integers in the buffer for efficient transmission.
Timeout Handling:

A timeout is set before the data is sent. This timeout controls how long the application waits before retrying or sending more data.
The timeout value can be entered by the user in a 'Timeout' field, with a default value of 15 seconds if left blank.
Receiving Data
Data Flow:

The application waits for incoming data from the Arduino through the serial port.
Once data is received, the application processes the response.
Data Processing:

The application strips off the prefix (0x1F, 0x7F) and suffix (0x1F, 0xFF) from the received data.
The remaining data (e.g., ID, parameters) is analyzed to determine if it's valid or needs further handling (e.g., displaying an error message if the ID or parameters are invalid).
Response Buffer:

After processing the received data, the application stores the response in the response buffer.
The response can be either auto-filled (based on data from the Excel sheet) or manually entered by the user if they choose to modify it.



3. Displaying Data
Input Validation and Error Display
Error Display:
If the received data contains errors (e.g., invalid telecommand ID or invalid parameters), specific messages are displayed in the application's display box.
For example:
If the response contains a 1, the application displays "Invalid Tc ID."
If the response contains a 2, it displays "Invalid parameters."
Input Validation:
Before sending the data, the application checks that all required fields are filled in (such as telecommand/telemetry selections, torque values, etc.).
If fields are missing or incorrectly filled, error messages guide the user.
Updating UI Elements
Dynamic ComboBox Updates:
Based on selections in the 'Sensor Selection' ComboBox and other fields, the UI dynamically updates the options in other fields (e.g., 'Error Selection', 'Response Selection').
For instance, when a telecommand ID is selected, the corresponding error options are populated from the Excel sheet.
Disabling/Enabling Fields:
Certain UI elements (e.g., torque fields) are enabled or disabled depending on the sensor type selected. If telecommand is selected, telemetry-related fields are disabled and vice versa.


4. Editing and Resetting Data
Editing the Send Buffer
The user can choose to edit the send buffer before transmitting the data.
When 'Edit Command' is clicked, the user is prompted with options to modify any existing entries in the buffer.
Once edited, the buffer is updated with the new data and then sent to the Arduino.
Resetting Fields
The reset button clears all the input fields and empties the send buffer. This allows the user to start over with fresh inputs without needing to manually clear each field.


5. Excel Data Integration
Pandas is used to read data from an Excel sheet that contains telemetry and telecommand command information.
The Excel sheet contains fields like:
Telemetry IDs and telecommand IDs.
Command names.
Error codes for telecommands.
The application accesses this data dynamically when populating ComboBoxes or when automatically filling in the response buffer.


6. Handling Telecommand and Telemetry IDs
The application differentiates between telecommands (IDs between 1-127) and telemetry commands (IDs between 128-256).
Based on the ID, the correct type of command is identified and processed.


7. Timeout and Sleep Handling
The timeout entry allows the user to specify how long the application should wait before resending data or retrying after an unsuccessful operation.
This timeout value is integrated into the time.sleep() function, ensuring that the application pauses for the specified duration between operations.


8. Serial Communication Example
Hereâ€™s a simplified flow:

User inputs data (sensor type, torque values, IDs, etc.).
Data stored in send buffer based on inputs and Excel data.
User clicks 'Send'.
Data sent to Arduino via serial communication.
Arduino processes the data and sends a response back.
Response received by the application.
Prefix and suffix are removed from the response.
Response analyzed:
If valid, it is displayed.
If invalid, an error message is shown (e.g., 'Invalid Tc ID').


9.User can edit the response before sending a final command back to the Arduino.
By providing this structured flow, you ensure data integrity, user input flexibility, and real-time interaction between the software and hardware components.


10.UI Elements 
ComboBoxes:

Used for selecting IDs, commands, or telemetry options. The selections in these ComboBoxes drive the rest of the application's logic, such as which data is fetched from the Excel file or what data is sent to the Arduino.
Buttons:

Submit Button: When clicked, it triggers the logic to store data in the send buffer and eventually send it to the Arduino.
Edit Command Button: This button asks the user if they want to modify the command before sending. If they choose 'Yes,' it enables the input fields for editing.
Reset Button: Clears all input fields and resets the buffer data to their initial states.
Entry Fields:

Allow the user to input specific data, such as a timeout duration or a custom command. These inputs are crucial for tailoring the communication to the user's needs.

11.Commands to install library-
.pip install pyinstaller
.pip install pyserial
.pip install pandas


12.To convert the python file into exe file
.Install pyinstaller
.Run this command in Terminal
		pyinstaller --onefile yourscript.py
.replace the yourscript with your python file name


